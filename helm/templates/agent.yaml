apiVersion: storage.k8s.io/v1
kind: CSIDriver
metadata:
  name: {{ .Values.driver }}
spec:
  attachRequired: false
  podInfoOnMount: true
  volumeLifecycleModes:
  - Persistent
  - Ephemeral
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: {{ .Values.name }}-agent
  namespace: {{ .Values.namespace }}
{{ include "local.labels" . | indent 2 }}
    app.kubernetes.io/component: {{ .Values.name }}-agent
spec:
  selector:
    matchLabels:
      app.kubernetes.io/component: {{ .Values.name }}-agent
  template:
    metadata:
{{ include "local.labels" . | indent 6 }}
        app.kubernetes.io/component: {{ .Values.name }}-agent
    spec:
      tolerations:
      - operator: Exists
      serviceAccount: {{ .Values.name }}
      priorityClassName: system-node-critical
      hostNetwork: true
      hostPID: true
      dnsPolicy: ClusterFirstWithHostNet
      containers:
      - name: agent
        args :
        - agent
        - "--nodename=$(KUBE_NODE_NAME)"
        - "--path.sysfs=/host_sys"
        - "--path.mount=/mnt/{{ .Values.name }}/"
        - "--lvname={{ .Values.agent.volume_name_prefix }}"
        env:
        - name: KUBE_NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        - name: HOST_SYS
          value: "/host_sys"
        - name: TZ
          value: Asia/Shanghai
        securityContext:
          privileged: true
          capabilities:
            add: ["SYS_ADMIN"]
          allowPrivilegeEscalation: true
        image: {{ .Values.global.DockerRegistryURL }}/{{ .Values.images.local.image }}:{{ .Values.images.local.tag }}
        imagePullPolicy: {{ .Values.global.ImagePullPolicy }}
        resources:
          limits:
            cpu: 200m
            memory: 256Mi
          requests:
            cpu: 50m
            memory: 64Mi
        volumeMounts:
{{- if .Values.agent.spdk }}
        - mountPath: /var/tmp/
          name: spdk
{{- end }}
        - mountPath: /dev
          mountPropagation: "HostToContainer"
          name: host-dev
        - name: sys
          readOnly: true
          mountPropagation: "HostToContainer"
          mountPath: "/host_sys"
        - mountPath: /mnt/{{ .Values.name }}/
          name: localvolume
          mountPropagation: "Bidirectional"
      - name: driver-registrar
        image: {{ .Values.global.RegistryURL }}/{{ .Values.images.registrar.image }}:{{ .Values.images.registrar.tag }}
        imagePullPolicy: {{ .Values.global.ImagePullPolicy }}
        args:
        - "--v=5"
        - "--csi-address=/csi/csi.sock"
        - "--kubelet-registration-path={{ .Values.agent.kubelet_dir }}/plugins/{{ .Values.driver }}/csi.sock"
        env:
        - name: KUBE_NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        - name: TZ
          value: Asia/Shanghai
        resources:
          limits:
            cpu: 200m
            memory: 100Mi
          requests:
            cpu: 20m
            memory: 50Mi
        volumeMounts:
          - name: plugin-dir
            mountPath: /csi
          - name: registration-dir
            mountPath: /registration
      - name: csi-plugin
        securityContext:
          privileged: true
          capabilities:
            add: ["SYS_ADMIN"]
          allowPrivilegeEscalation: true
        image: {{ .Values.global.DockerRegistryURL }}/{{ .Values.images.local.image }}:{{ .Values.images.local.tag }}
        imagePullPolicy: {{ .Values.global.ImagePullPolicy }}
        args:
        - csi
        - "--endpoint=$(CSI_ENDPOINT)"
        - "--nodeID=$(KUBE_NODE_NAME)"
        - "--driver={{ .Values.driver }}"
{{- if eq .Values.agent.driverMode "node" }}
        - "--driver-mode=node"
{{- else }}
        - "--driver-mode=all"
{{- if .Values.controller.framework_scheduler_names }}
        - --framework-scheduler-names={{ .Values.controller.framework_scheduler_names }}
{{- end }}
{{- end }}
        env:
        - name: KUBE_NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        - name: CSI_ENDPOINT
          value: unix:/{{ .Values.agent.kubelet_dir }}/plugins/{{ .Values.driver }}/csi.sock
        - name: TZ
          value: Asia/Shanghai
        - name: ISSUE_ORPHANED_POD
          value: "true"
        - name: ISSUE_BLOCK_REFERENCE
          value: "true"
        - name: ISSUE_MESSAGE_FILE
          value: "true"
{{- if .Values.global.YodaSchedulerSvcIP }}
        - name: EXTENDER_SVC_IP
          value: "{{ .Values.global.YodaSchedulerSvcIP }}"
{{- end }}
        resources:
          limits:
            cpu: 2
            memory: 4Gi
          requests:
            cpu: 50m
            memory: 128Mi
{{- if .Values.agent.spdk }}
        lifecycle:
          postStart:
            exec:
              command: ["/bin/sh", "-c",
                        "/usr/sbin/iscsid -p /run/iscsid.pid || echo failed to start iscsid"]
          preStop:
            exec:
              command: ["/bin/sh", "-c","cat /run/iscsid.pid | xargs  kill -9"]
{{- end }}
        volumeMounts:
{{- if .Values.agent.spdk }}
        - mountPath: /var/tmp/
          name: spdk
        - mountPath: /var/run/kata-containers/vhost-user/block
          name: vhost
        - mountPath: /run/kata-containers/shared/direct-volumes
          name: directvolume
{{- end }}
        - name: pods-mount-dir
          mountPath: {{ .Values.agent.kubelet_dir }}
          mountPropagation: "Bidirectional"
        - mountPath: /dev
          mountPropagation: "HostToContainer"
          name: host-dev
        - mountPath: /mnt/{{ .Values.name }}/
          mountPropagation: "Bidirectional"
          name: localvolume
        - mountPath: /var/log
          name: host-log
        - mountPath: /host_sys
          mountPropagation: Bidirectional
          name: sys
      volumes:
{{- if .Values.agent.spdk }}
      - name: spdk
        hostPath:
          path: /var/tmp/
          type: DirectoryOrCreate
      - name: vhost
        hostPath:
          path: /var/run/kata-containers/vhost-user/block
          type: DirectoryOrCreate
      - name: directvolume
        hostPath:
          path: /run/kata-containers/shared/direct-volumes
          type: DirectoryOrCreate
{{- end }}
      - name: host-dev
        hostPath:
          path: /dev
      - name: sys
        hostPath:
          path: "/sys"
      - name: localvolume
        hostPath:
          path: /mnt/{{ .Values.name }}/
          type: DirectoryOrCreate
      - name: plugin-dir
        hostPath:
          path: {{ .Values.agent.kubelet_dir }}/plugins/{{ .Values.driver }}
          type: DirectoryOrCreate
      - name: registration-dir
        hostPath:
          path: {{ .Values.agent.kubelet_dir }}/plugins_registry
          type: DirectoryOrCreate
      - name: pods-mount-dir
        hostPath:
          path: {{ .Values.agent.kubelet_dir }}
          type: Directory
      - name: host-log
        hostPath:
          path: /var/log
          type: DirectoryOrCreate
  updateStrategy:
    type: RollingUpdate

